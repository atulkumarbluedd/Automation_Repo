package RestAssuredHandsOn;

import RestAssuredHandsOn.PoJO.Response1;
import io.opentelemetry.sdk.logs.data.Body;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.http.ContentType;
import io.restassured.http.Header;
import io.restassured.http.Headers;
import io.restassured.response.Response;
import io.restassured.specification.QueryableRequestSpecification;
import io.restassured.specification.RequestSpecification;
import io.restassured.specification.SpecificationQuerier;
import org.apache.http.HttpStatus;
import org.testng.Assert;
import org.testng.annotations.Test;

import javax.swing.*;

import static io.restassured.RestAssured.given;

public class AutherizationHandsOn {

    /**
     * various authentication
     * 1. form authentication
     * 2. basic authentication
     * 3. preemptive authentication
     * 4. Oauth1 > consumerId, consumerSecret, accessToken, tokenSecret
     * 5. Oauth2
     */
    String apikey = "def5bd8d6d6376d2b658b9eb9b2f0f1e";
    static String access_token = "";

    @Test(description = "This test is about apikey usage in api calls which we have generated from application site")
    public void apikeyAuthentication() {
        /**
         * it is a unique key generated by server which is used as querry parameter in the api call to get the response
         * this key is appid which is generated by application which can be used for the call to check the user is authorized or not
         */
        /*
        https://api.openweathermap.org/data/3.0/onecall?lat={lat}&lon={lon}&exclude={part}&appid={API key}
         */
        RestAssured.baseURI = "https://api.openweathermap.org/";
        Response response = given().basePath("data/2.5/weather").queryParam("q", "delhi")
//                .queryParam("Limit", "5")
                .queryParam("appid", "98d64d858ac091f98d0d8758cf96d20d").get();

        Assert.assertEquals(response.statusCode()/*actual*/, 200/*expected*/, "check for api call");
        System.out.println(response.statusLine());
        System.out.println(response.body().asString());
    }

    @Test(description = " this test is to demonstrate oauth2")
    public void generate_accessToken() {
        /**
         * suppose we want to login with any application then using google,facebook,microsoft also we can login
         * this is done via oauth2.o
         * then application which is using data from microsoft or gmail then application has used oauth 2.0
         * the autherization protocol is used is oAuth 2.0
         *
         *  steps
         *  1. authorisation req
         *  2. Authorization grant
         *  3. Autherzation grant
         *  4. Access token
         *  5. Access token
         *  6. protected resource
         *
         *  Here we have to generate cient id and client secrets
         *  Access token we have to generate >> this will be done via post call where we have to provide client id
         *  and client secrets and then this call will give you one access token
         *  "Authorization : Basic Auth" will be used generally i.e. using username --> client_id and password --> client secret
         *
         */

        String clientId = "", clientSecret = "";

        RequestSpecification requestspec = given();
        requestspec.baseUri("https://api-m.sandbox.paypal.com")
                .basePath("/v1/oauth2/token");

        /* basic preemptive auth*/
        Response response = requestspec.auth().preemptive().basic(clientId, clientSecret)
                .param("grant_type", "client_credentials").post();
        System.out.println(response.prettyPrint());

        /* above api call will give you access token this you can use for further requests*/
        access_token = response.getBody().path("access_token");

    }

    @Test(dependsOnMethods = "generate_accessToken") // this access token is not generated then it will not work !!
    public void test_oAuth2() {
        RequestSpecification reqres = given();
        String response = reqres.auth().oauth2(access_token).queryParam("page", "3")
                .queryParam("page_size", "4")
                .queryParam("total_count_required", "true")
                .contentType(ContentType.JSON)
                .get("https://api-m.sandbox.paypal.com/v1/invoicing/invoices").prettyPrint();
        System.out.println(response);
    }

    /**
     * convert class object into byte stream and can be stored in a db, file, memory this is called serialization
     * and reverse is from file, memory or db into byte stream and then convert into class object is called desealization
     * object into json is serialization
     * json into class object is deserialization
     */

    @Test(description = "this is one more way to validate whether our request is properly created or not !!")
    public void sample() {
        RestAssured.baseURI = "https://reqres.in/";
        RequestSpecification reqSpec = given().header("header1", "atul");
        Response1 responseObject = reqSpec.pathParams("page", "2").basePath("/api/users/{page}")
                .when().get().getBody().
                // here we can use get body or without get body both will work
                        as(Response1.class);

        // query details from req specification
        QueryableRequestSpecification queryRequest = SpecificationQuerier.query(reqSpec);

        /* get body*/
        String body = queryRequest.getBody();
        System.out.println(STR."body \{body}");

        /*get base PATH*/
        String retrievableBasePath = queryRequest.getBasePath();
        System.out.println(STR." Base Path \{retrievableBasePath}");

        String baseUri = queryRequest.getBaseUri();
        System.out.println(STR."Base URI \{baseUri}");

        /** get request headers **/
        System.out.println(STR." printing header values *******");
        Headers allHeaders = queryRequest.getHeaders();
        for (Header header : allHeaders)
            System.out.println(header.getName() + "::" + header.getValue());


//
//        System.out.println(responseObject.getSupport().getText());
//        String expected = "To keep ReqRes free, contributions towards server costs are appreciated!";
//        Assert.assertEquals(responseObject.getSupport().getText().trim()/*Actual*/, expected /*expected*/);
    }

    @Test(description = "basic authorization ")
    public void basic_Autherization() {
        given().auth().basic("userid", "password")
                .when().get().then().assertThat()
                .statusCode(HttpStatus.SC_OK);
    }

    @Test(description = "Form authentication")
    public void form_authentication() {
        given().auth().form("username", "password").when();
    }

    @Test(description = "Auth 1.0 ")
    public void oauth1_0() {
        given().accept(ContentType.JSON)
                .auth().
                oauth("consumerId", "consumerSecret", "accessToken", "toeknSecret");

    }


}
