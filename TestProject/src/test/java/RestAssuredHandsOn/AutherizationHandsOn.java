package RestAssuredHandsOn;


import RestAssuredHandsOn.ApiUtils.HybridOAuthTokenManager;
import RestAssuredHandsOn.PoJO.Response1;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.http.Header;
import io.restassured.http.Headers;
import io.restassured.response.Response;
import io.restassured.specification.QueryableRequestSpecification;
import io.restassured.specification.RequestSpecification;
import io.restassured.specification.SpecificationQuerier;
import org.apache.http.HttpStatus;
import org.testng.Assert;
import org.testng.annotations.Test;

import static io.restassured.RestAssured.given;
import static io.restassured.authentication.OAuthSignature.QUERY_STRING;

public class AutherizationHandsOn {

    /**
     * same autherization can be used in JWT as well
     * various authentication
     * 1. form authentication ::
     * 2. basic authentication :: username and password
     * 3. preemptive authentication
     * 4. Oauth1 > consumerId, consumerSecret, accessToken, tokenSecret
     * 5. Oauth2 > clientId, clientSecret, accessToken, refreshToken
     * 6. API key authentication > this is used in most of the cases where we have to use API key
     * 7. Bearer token authentication > this is used in most of the cases where we have to use bearer token
     * 8. Digest authentication >
     * 9. HMAC authentication > this is used in most of the cases where we have to use HMAC authentication
     * 10. SAML authentication > this is used in most of the cases where we have to use SAML authentication
     * 11. JWT authentication > this is used in most of the cases where we have to use JWT authentication
     */
    String apikey = "def5bd8d6d6376d2b658b9eb9b2f0f1e";
    static String access_token = "";

    @Test(description = "This test is about apikey usage in api calls which we have generated from application site")
    public void apikeyAuthentication() {
        /**
         * it is a unique key generated by server which is used as querry parameter in the api call to get the response
         * this key is appid which is generated by application which can be used for the call to check the user is authorized or not
         */
        /*
        https://api.openweathermap.org/data/3.0/onecall?lat={lat}&lon={lon}&exclude={part}&appid={API key}
         */
        RestAssured.baseURI = "https://api.openweathermap.org/";
        Response response = given().basePath("data/2.5/weather").queryParam("q", "delhi")
//                .queryParam("Limit", "5")
                .queryParam("appid", "98d64d858ac091f98d0d8758cf96d20d").get();

        Assert.assertEquals(response.statusCode()/*actual*/, 200/*expected*/, "check for api call");
        System.out.println(response.statusLine() + " :: status line");
        System.out.println(response.body().asString());
    }

    @Test(description = " this test is to demonstrate oauth2")
    public void generate_accessToken() {
        /**
         * suppose we want to login with any application then using google,facebook,microsoft also we can login
         * this is done via oauth2.o
         * then application which is using data from microsoft or gmail then application has used oauth 2.0
         * the autherization protocol is used is oAuth 2.0
         *
         *  steps
         *  1. authorisation req
         *  2. Authorization grant
         *  3. Autherzation grant
         *  4. Access token
         *  5. Access token
         *  6. protected resource
         *
         *  Here we have to generate cient id and client secrets
         *  Access token we have to generate >> this will be done via post call where we have to provide client id
         *  and client secrets and then this call will give you one access token
         *  "Authorization : Basic Auth" will be used generally i.e. using username --> client_id and password --> client secret
         *
         */

        String clientId = "", clientSecret = "";

        RequestSpecification requestspec = given();
        requestspec.baseUri("https://api-m.sandbox.paypal.com")
                .basePath("/v1/oauth2/token");

        /* basic preemptive auth*/
        Response response = requestspec.auth().preemptive().basic(clientId, clientSecret)
                .param("grant_type", "client_credentials").post();
        System.out.println(response.prettyPrint());

        /* above api call will give you access token this you can use for further requests*/
        access_token = response.getBody().path("access_token");

    }

    @Test(dependsOnMethods = "generate_accessToken") // this access token is not generated then it will not work !!
    public void test_oAuth2() {
        RequestSpecification reqres = given();
        String response = reqres.auth().oauth2(access_token).queryParam("page", "3")
                .queryParam("page_size", "4")
                .queryParam("total_count_required", "true")
                .contentType(ContentType.JSON)
                .get("https://api-m.sandbox.paypal.com/v1/invoicing/invoices").prettyPrint();
        System.out.println(response);
    }

    /**
     * convert class object into byte stream and can be stored in a db, file, memory this is called serialization
     * and reverse is from file, memory or db into byte stream and then convert into class object is called desealization
     * object into json is serialization
     * json into class object is deserialization
     */

    @Test(description = "this is one more way to validate whether our request is properly created or not !!")
    public void sample() {
        RestAssured.baseURI = "https://reqres.in/";
        RequestSpecification reqSpec = given().header("header1", "atul");
        Response1 responseObject = reqSpec.pathParams("page", "2").basePath("/api/users/{page}")
                .when().get().getBody().
                // here we can use get body or without get body both will work
                        as(Response1.class);

        // query details from req specification
        QueryableRequestSpecification queryRequest = SpecificationQuerier.query(reqSpec);

        /* get body*/
        String body = queryRequest.getBody();
        ////System.out.println(STR."body \{body}");

        /*get base PATH*/
        String retrievableBasePath = queryRequest.getBasePath();
        ////System.out.println(STR." Base Path \{retrievableBasePath}");

        String baseUri = queryRequest.getBaseUri();
        ////System.out.println(STR."Base URI \{baseUri}");

        /** get request headers **/
        ////System.out.println(STR." printing header values *******");
        Headers allHeaders = queryRequest.getHeaders();
        for (Header header : allHeaders)
            System.out.println(header.getName() + "::" + header.getValue());


//
//        System.out.println(responseObject.getSupport().getText());
//        String expected = "To keep ReqRes free, contributions towards server costs are appreciated!";
//        Assert.assertEquals(responseObject.getSupport().getText().trim()/*Actual*/, expected /*expected*/);
    }

    @Test(description = "basic authorization ")
    public void basic_Autherization() {
        given().auth().basic("userid", "password")
                .when().get().then().assertThat()
                .statusCode(HttpStatus.SC_OK);
    }

    @Test(description = "Form authentication")
    public void form_authentication() {
        given().auth().form("username", "password").when();
    }

    @Test(description = "Auth 1.0 ")
    public void oauth1_0() {
        given().accept(ContentType.JSON)
                .auth().
                oauth("consumerKey", "consumerSecret", "accessToken", "toeknSecret", QUERY_STRING)
                .when().get("https://api.example.com/protected/resource"); // Replace with your API endpoint;

    }

    /**
     * let’s implement token caching with expiration logic in Java using Rest Assured, so that:
     * We don't hit the OAuth token endpoint every time.
     * We reuse the token until it expires.
     */
    @Test(description = "How to cache token and use it in further requests for OAuth2")
    public void cacheToken() {
        String token = HybridOAuthTokenManager.getAccessToken();

        Response response = given()
                .baseUri("https://api.example.com") // Replace with your API base
                .auth().oauth2(token)
                .when()
                .get("/your/protected/resource") // Replace with endpoint
                .then().log().all()
                .statusCode(200)
                .extract().response();

        System.out.println(response.getBody().asString());
    }


/** other types of OAuth2 grants
 * OAuth2 has several grant types, each suited for different use cases. Here’s a quick
 * reference table to help you understand when to use each type:
 *
 *
 *
 * | Grant Type                        | Use Case                                    | Requires User Login?            | Secure? | Notes                          |
 * | --------------------------------- | ------------------------------------------- | ------------------------------- | ------- | ------------------------------ |
 * | **1. Authorization Code**         | Web apps (browser to server)                | ✅ Yes                           | ✅ High  | Recommended for user login     |
 * | **2. Client Credentials**         | Server-to-server, no user involved          | ❌ No                            | ✅ High  | Great for backend services     |
 * | **3. Password (ROPC)**            | Trusted apps using user’s username/password | ✅ Yes                           | ⚠️ Low  | Not recommended for most cases |
 * | **4. Implicit**                   | Single-page apps (deprecated)               | ✅ Yes                           | ❌ Low   | No longer recommended          |
 * | **5. Device Authorization Grant** | Devices without browsers (e.g., TV login)   | ✅ Yes                           | ✅ High  | Good for IoT, consoles         |
 * | **6. Refresh Token**              | Used to get a new access token              | ❌ No (if already authenticated) | ✅ High  | Helps maintain session         |
 */


    /**
     * 1️⃣ Username & Password (Basic Login)
     * Sample API assumptions:
     * POST /auth/login
     * <p>
     * Request body: JSON { "username": "admin", "password": "password" }
     * <p>
     * Response JSON: { "token": "jwt_token_here" }
     */


    public static String getTokenWithUsernamePassword() {
        Response response = given()
                .contentType("application/json")
                .body("{ \"username\": \"admin\", \"password\": \"password\" }")
                .when()
                .post("http://localhost:3000/auth/login")
                .then()
                .statusCode(200)
                .extract().response();

        return response.jsonPath().getString("token");
    }

    /**
     * 2️⃣ Client Credentials (API Keys)
     * Typical OAuth2 client credentials flow:
     * POST /oauth/token
     * <p>
     * Form params: grant_type=client_credentials, client_id, client_secret
     * <p>
     * Response JSON: { "access_token": "jwt_token_here", ... }
     */
    public static String getTokenWithClientCredentials() {
        Response response = given()
                .contentType("application/x-www-form-urlencoded")
                .formParam("grant_type", "client_credentials")
                .formParam("client_id", "your_client_id")
                .formParam("client_secret", "your_client_secret")
                .when()
                .post("http://localhost:3000/oauth/token")
                .then()
                .statusCode(200)
                .extract().response();

        return response.jsonPath().getString("access_token");
    }


    /**
     * 3️⃣ Social Login / OAuth (Example: Using Google token)
     * Flow (simplified):
     * Client gets Google ID token from Google sign-in
     * <p>
     * Sends it to backend POST /auth/google
     * <p>
     * Backend verifies and returns JWT token
     */

    public static String getTokenWithGoogleToken(String googleIdToken) {
        Response response = given()
                .contentType("application/json")
                .body("{ \"idToken\": \"" + googleIdToken + "\" }")
                .when()
                .post("http://localhost:3000/auth/google")
                .then()
                .statusCode(200)
                .extract().response();

        return response.jsonPath().getString("token");
    }

    /**
     * Flow:
     * POST /auth/refresh
     * <p>
     * Body: { "refreshToken": "refresh_token_here" }
     */
    public static String refreshJwtToken(String refreshToken) {
        Response response = given()
                .contentType("application/json")
                .body("{ \"refreshToken\": \"" + refreshToken + "\" }")
                .when()
                .post("http://localhost:3000/auth/refresh")
                .then()
                .statusCode(200)
                .extract().response();

        return response.jsonPath().getString("token");
    }

//todo: ************** OAUTH2 AUTOMATION **************************

    /**
     * In very simple terms OAuth2 is a protocol Automation
     */

    public static void Oauth2Automation() {
        // Step 1: Get token using username/password
        Response response = given()
                .contentType("application/x-www-form-urlencoded")
                .formParam("grant_type", "client_credentials")
                .formParam("client_id", "clientId")
                .formParam("client_secret", "clientSecret")
                .when()
                .post("https://your-auth-server.com/token");

        String accessToken = response.jsonPath().getString("access_token");

// Use token
        given()
                .auth()
                .oauth2(accessToken)
                .when()
                .get("/your-protected-api");
    }

    // todo: ************** API KEY Authentication **************************

    public static void apiKeyAuthentication() {
        // Step 1: Get API key from your service provider

        given()
                .header("x-api-key", "abc123");

    }
    public static void apiKeyAuthenticationWithQueryParam() {
        // Step 1: Get API key from your service provider
        given()
                .queryParam("api_key", "abc123")
                .when()
                .get("/your-api-endpoint")
                .then()
                .statusCode(200);
    }
    //todo: ************** Form Authentication using cookie session **************************

    public void  formAuthentication() {
        // Step 1: Login - send form parameters, get session cookie
        String sessionId =
                given()
                        .formParam("username", "admin")
                        .formParam("password", "admin123")
                        .when()
                        .post("/login")
                        .then()
                        .statusCode(200)
                        .extract()
                        .cookie("JSESSIONID"); // or whatever cookie your app uses

        // Step 2: Use session cookie to access protected resource
        given()
                .cookie("JSESSIONID", sessionId)
                .when()
                .get("/protected/resource")
                .then()
                .statusCode(200)
                .log().body();
    }
}
